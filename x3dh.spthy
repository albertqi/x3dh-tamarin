theory X3DH
begin

builtins: diffie-hellman, hashing, signing, symmetric-encryption

rule IdentityKey:
    let ik = 'ik'^~sk in
    [ Fr(~sk) ]
    -->
    [ !PrivateIdentityKey($P, ~sk), !PublicIdentityKey($P, ik),
      Out(ik) ]

rule SignedPrekey:
    let spk = 'spk'^~sk in
    [ Fr(~sk) ]
    -->
    [ !PrivateSignedPrekey($P, ~sk), !PublicSignedPrekey($P, spk),
      Out(spk) ]

rule OneTimePrekey:
    let opk = 'opk'^~sk in
    [ Fr(~sk) ]
    -->
    [ !PrivateOneTimePrekey($P, ~sk), !PublicOneTimePrekey($P, opk),
      Out(opk) ]

rule B_Init:
    let prekey_sig = sign(SPKB, ~pIKB) in
    [ !PrivateIdentityKey($B, ~pIKB), !PublicIdentityKey($B, IKB),
      !PublicSignedPrekey($B, SPKB), !PublicOneTimePrekey($B, OPKB) ]
    --[ ReachBInit() ]->
    [ Out(<$B, IKB, SPKB, prekey_sig, OPKB>) ]

rule A_InitMsg:
    let EKA = 'ek'^~sk
        DH1 = SPKB^~pIKA
        DH2 = IKB^~sk
        DH3 = SPKB^~sk
        DH4 = OPKB^~sk
        SK = h(<DH1, DH2, DH3, DH4>)
        AD = <IKA, IKB> in
    [ !PrivateIdentityKey($A, ~pIKA), !PublicIdentityKey($A, IKA), Fr(~sk), Fr(~msg),
      In(<$B, IKB, SPKB, prekey_sig, OPKB>) ]
    --[ ReachAInitMsg(), ResponderKey(SK), MessageWasSent(~msg),
        Eq(verify(prekey_sig, SPKB, IKB), true) ]->
    [ Out(<$A, IKA, EKA, senc(<~msg, AD>, SK)>) ]

rule B_RecMsg:
    let DH1 = IKA^~pSPKB
        DH2 = EKA^~pIKB
        DH3 = EKA^~pSPKB
        DH4 = EKA^~pOPKB
        SK = h(<DH1, DH2, DH3, DH4>)
        AD = <IKA, IKB> in
    [ !PrivateIdentityKey($B, ~pIKB), !PublicIdentityKey($B, IKB),
      !PrivateSignedPrekey($B, ~pSPKB), !PrivateOneTimePrekey($B, ~pOPKB),
      In(<$A, IKA, EKA, msg_enc>) ]
    --[ ReachBRecMsg(), InitiatorKey(SK) ]->
    [ Out(sdec(msg_enc, SK)) ]

rule LeakPrivateKeys:
    [ !PrivateIdentityKey($A, ~pika), !PrivateIdentityKey($B, ~pikb), !PrivateSignedPrekey($B, ~pskb)]
    --[ Leak() ]->
    [ Out(<~pika, ~pikb, ~pskb>) ]

restriction Eq:
    "All t1 t2 #x. Eq(t1, t2) @ #x ==> t1 = t2"

lemma Executability:
    exists-trace
    "Ex #t1 #t2 #t3. ReachBInit() @ #t1 & ReachAInitMsg() @ #t2 & ReachBRecMsg() @ #t3"

lemma ResponderKeySecrecy:
    "All k #t. ResponderKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma InitiatorKeySecrecy:
    "All k #t. InitiatorKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma SendMsgSecrecy:
    "All m #t. MessageWasSent(m) @ #t ==> not Ex #x. K(m) @ #x"

lemma ForwardSecrecy:
    "All m #i #j. i < j & MessageWasSent(m) @ i & Leak() @ #j ==> not Ex #x. K(m) @ #x"

end
